name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8' 

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./app/requirements.txt

      - name: Run linting with flake8
        run: |
          pip install flake8
          flake8 ./app

  test:
    runs-on: ubuntu-latest
    needs: lint  # Ensure linting job completes first
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./app/requirements.txt

      # - name: Run unit tests
      #   run: |
      #    pip install pytest
      #    pytest

  build:
    runs-on: ubuntu-latest
    needs: test  # Ensure unit tests complete first
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/test-app:latest ./app

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/test-app:latest

      - name: Run Docker container
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/test-app:latest
          docker stop app-container || true
          docker rm app-container || true
          docker run -d --name app-container -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/test-app:latest

      - name: Wait for application to start (with curl check)
        run: |
          echo "Waiting for application to start..."
          sleep 10
          curl -f http://localhost:5000 || exit 1
          echo "Application is up and running!"
          
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure Docker image is built and pushed before deploying
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy to web server VM using Docker Compose
        run: |
          ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.WEB_SERVER_SSH_USER }}@${{ secrets.WEB_SERVER_SSH_HOSTNAME }} '
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/test-app:latest
          sudo docker stop my-app-container || true
          sudo docker rm my-app-container || true
          sudo docker run -d --name app-container -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/test-app:latest'
